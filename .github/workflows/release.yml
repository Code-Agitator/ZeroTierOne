on:
  pull_request:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build_ubuntu:
    runs-on: ubuntu-latest
    steps:
      - name: gitconfig
        run: |
          git config --global core.autocrlf input
        #        git config --global core.eol lf
      - name: checkout
        uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: x86_64-unknown-linux-gnu
          components: rustfmt, clippy

      - name: Set up cargo cache
        uses: Swatinem/rust-cache@v2
        continue-on-error: false
        with:
          key: "${{ runner.os }}-cargo-${{ hashFiles('rustybits//Cargo.lock') }}"
          shared-key: ${{ runner.os }}-cargo-
          workspaces: |
            rustybits/

      - name: make
        run: make
      - name: selftest
        run: |
          make selftest
          ./zerotier-selftest

      - name: Set release filename
        run: |
          echo "RELEASE_FILE=zerotier-one-x86_64-unknown-linux-gnu" >> $GITHUB_ENV
      - name: Rename executable with version
        run: |
          mv "zerotier-one" "${{ env.RELEASE_FILE }}"

      - name: Upload to Release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.RELEASE_FILE }}
          tag_name: v${{ env.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_macos:
    runs-on: macos-latest
    steps:
      - name: gitconfig
        run: |
          git config --global core.autocrlf input
        #        git config --global core.eol lf
      - name: checkout
        uses: actions/checkout@v4
      - name: Install Rust aarch64
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: aarch64-apple-darwin
          components: rustfmt, clippy
      - name: Install Rust x86_64
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: x86_64-apple-darwin
          components: rustfmt, clippy
      - name: Set up cargo cache
        uses: Swatinem/rust-cache@v2
        continue-on-error: false
        with:
          key: "${{ runner.os }}-cargo-${{ hashFiles('rustybits//Cargo.lock') }}"
          shared-key: ${{ runner.os }}-cargo-
          workspaces: |
            rustybits/
      - name: make
        run: make
      - name: selftest
        run: |
          make selftest
          ./zerotier-selftest
      - name: Set release filename
        run: |
          echo "RELEASE_FILE=zerotier-one-x86_64-unknown-linux-gnu" >> $GITHUB_ENV

      - name: Rename executable with version
        run: |
          mv "zerotier-one" "${{ env.RELEASE_FILE }}"

      - name: Upload to Release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.RELEASE_FILE }}
          tag_name: v${{ env.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



  build_windows:
    runs-on: windows-latest
    steps:
      - name: gitconfig
        run: |
          git config --global core.autocrlf true
        #        git config --global core.eol lf
      - name: checkout
        uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: aarch64-apple-darwin
          components: rustfmt, clippy
      - name: Set up cargo cache
        uses: Swatinem/rust-cache@v2
        continue-on-error: false
        with:
          key: "${{ runner.os }}-cargo-${{ hashFiles('rustybits//Cargo.lock') }}"
          shared-key: ${{ runner.os }}-cargo-
          workspaces: |
            rustybits/

      - name: setup msbuild
        uses: microsoft/setup-msbuild@v2
      - name: msbuild
        run: |
          msbuild windows\ZeroTierOne.sln /m /p:Configuration=Release  /property:Platform=x64 /t:ZeroTierOne
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: zerotier-one-windows
          path: windows/Build
          retention-days: 7
      - name: Extract version from spec file
        id: extract_version
        run: |
          $version = Select-String -Path "zerotier-one.spec" -Pattern "^Version:" | ForEach-Object { ($_ -split '\s+', 2)[1] }
          echo "VERSION=$version" >> $env:GITHUB_ENV
          echo "version=$version" >> $env:GITHUB_OUTPUT
      - name: Set release filename
        run: |
          echo "RELEASE_FILE=zerotier-one-x86_64-pc-windows-msvc.exe" >> $env:GITHUB_ENV

      - name: Rename executable with version
        run: |
          ren "windows/Build/x64/Release/zerotier-one_x64.exe" "${{ env.RELEASE_FILE }}"

      - name: Upload to Release
        uses: softprops/action-gh-release@v1
        with:
          files: windows/Build/x64/Release/${{ env.RELEASE_FILE }}
          tag_name: v${{ env.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
